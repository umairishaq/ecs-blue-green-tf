AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy infra required for blue/green deyployment type using EXTERNAL DeploymentController.

Parameters: 
  Vpc:
    Type: AWS::EC2::VPC::Id
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  # ECS resources
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: blue-green
      ClusterSettings:
        - Name: containerInsights
          Value: disabled

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: bg-svc-example
      DesiredCount: 2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      SchedulingStrategy: REPLICA
      DeploymentController:
        Type: EXTERNAL

  # Load balancer resources
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets: !Ref Subnets
      Type: application

  BlueServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 4
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: 5
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref Vpc

  GreenServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 4
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: 5
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref Vpc

  BlueListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref BlueServiceTargetGroup
                Weight: 100
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  GreenListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref GreenServiceTargetGroup
                Weight: 100
      LoadBalancerArn: !Ref LoadBalancer
      Port: 9000
      Protocol: HTTP

  # Security Groups:
  # Allow traffic to the load balancer from the internet,
  # and from the load balancer to the ECS containers.
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for reInvent Trivia backend service"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId: !Ref Vpc

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for reInvent Trivia backend load balancer"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on production traffic port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on test traffic ports 9000 - 9002
          FromPort: 9000
          IpProtocol: tcp
          ToPort: 9002
      VpcId: !Ref Vpc

  LoadBalancerSecurityGroupToServiceSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId: !GetAtt ServiceSecurityGroup.GroupId
      FromPort: 80
      ToPort: 80

  LoadBalancerSecurityGroupToServiceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId: !GetAtt ServiceSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      ToPort: 80

Outputs:
  ServiceURL:
    Value: !Join
      - ""
      - - http://
        - !GetAtt LoadBalancer.DNSName
